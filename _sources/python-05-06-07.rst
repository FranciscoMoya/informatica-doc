
Abstracción con funciones
=========================

Recursión
---------

*Ejercicio: Implementar el factorial de forma iterativa y recursiva*

.. code:: python

    def fact(n):
        if (n < 2):
            return 1
        return n*fact(n-1)

.. code:: python

    def fact_iter(n):
        res = 1
        for i in range(n,1,-1):
            res *= i
        return res

.. code:: python

    assert(fact(10) == fact_iter(10))

*Ejercicio: implementar una función para saber si un texto es
palíndromo.*

.. code:: python

    def es_palindromo(texto):
        return es_simetrico(extraer_letras(texto))
    
    def extraer_letras(texto):
        letras = ''
        for c in texto.lower():
            if c.isalpha():
                letras += c
        return letras
    
    def es_simetrico(s):
        if len(s) < 2:
            return True
        return s[0] == s[-1] and es_simetrico(s[1:-1])

.. code:: python

    print(es_palindromo('Dabale arroz a la zorra el abad.'))


.. parsed-literal::

    True


Recursión
---------

*Ejercicio: Implementar de forma recursiva un programa que dibuje la
curva de Koch*

Este tipo de dibujos se puede hacer facilmente con el módulo ``turtle``
de la biblioteca estándar. Nosotros vamos a usar una versión de
``turtle`` que funciona en los cuadernos. Se llama ``mobilechelonian``
pero funciona igual que ``turtle``.

.. code:: python

    def koch(t, N, n=None):
        if n == None:
            n = N
        if n == 0:
            t.forward(400/3**N)
            return
        for angulo in (-60, 120, -60, 0):
            koch(t, N, n-1)
            if angulo < 0:
                t.left(-angulo)
            else:
                t.right(angulo)

.. code:: python

    from mobilechelonian import Turtle
    
    t = Turtle()
    t.speed(10)
    t.penup()
    t.goto(-200,0)
    t.pendown()
    t.pensize(3)
    koch(t, 4)
    t.penup()
    t.home()

